% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/5_parallel.R
\name{par_lapply}
\alias{par_lapply}
\title{Parallel apply function to list in all platforms}
\usage{
par_lapply(
  lst,
  fun,
  cores = NULL,
  parallel = TRUE,
  win_init = expression({     requireNamespace("ctmm", quietly = TRUE) })
)
}
\arguments{
\item{lst}{Input list.}

\item{fun}{Function to be applied on \code{lst}. Note only single parameter
function is accepted, otherwise it's difficult to determine how to assign
input parameters to each list item and worker. You need to convert multiple
parameter function into a function take single list parameter, and assign
parameters in that list accordingly. \code{\link[=align_lists]{align_lists()}} is a helper function
to align multiple lists.}

\item{cores}{the core count to be used for cluster. Could be a positive
integer or
\itemize{
\item Default \code{NULL} value will indicate to use a heuristic value based on detected cores, which is roughly \code{min(input_size, physical_cores_count * n)},
\code{n} being 2 for windows, 4 for Mac/Linux. See \code{\link[parallel:detectCores]{parallel::detectCores()}} for
more information on physical/logical cores in different platforms.
\item A negative value like \code{-2} will use \verb{all available cores - 2}, so that 2
cores are reserved for user's other tasks.
}}

\item{parallel}{Use regular \code{\link[=lapply]{lapply()}} when FALSE. You may notice more console
messages in this mode because the console messages in parallel mode are
lost by default as they happened in other threads.}

\item{win_init}{Expression to be initialized in Windows. Since all parameters
should be included in the input list already, this usually means library
calls, like \code{{library(ctmm)}} for ctmm related operations, which has been
taken care of with the default value. Note \code{\link[=requireNamespace]{requireNamespace()}} is used
because that's more appropriate inside a package.}
}
\value{
List of applied results
}
\description{
This is a generic parallel lapply that work across all major platforms.
}
\details{
In Windows \code{\link[parallel:clusterApply]{parallel::parLapplyLB()}} is used, which is a socket cluster and
need to initialize each session manually with \code{win_init} if needed. In
Linux/Mac \code{\link[parallel:mcdummies]{parallel::mclapply()}} is used, where each worker will inherit the
current environment through forking, so no additional setup is required.
}
